import { find, merge, defaultsDeep } from 'lodash';

const FETCH_INIT_DEFAULTS = merge({
    mode: 'cors'
});

var serviceConfig = [
    {
        host: 'localhost',
        url: 'https://localhost:9999/api'
    }
];

//dynamically determine the service URL to use.
const service = find(serviceConfig, { host: document.location.hostname });
let servicePrefix = serviceConfig[0].url;
if (service !== null) {
    servicePrefix = service.url;
}

export const addQuery = (url, queryParams) => {
    if (queryParams) {
        Object.keys(queryParams).forEach(key => {
            if (queryParams[key]) {
                const paramVal = queryParams[key];

                if (paramVal) {
                    if (Array.isArray(paramVal))
                        paramVal.map(val => url.searchParams.append(key, val));
                    else url.searchParams.append(key, paramVal);
                }
            }
        });
    }
    return url;
};

// to change request METHOD set property key "method" on setup
const request = baseURL => (path = '', params = {}, setup = {}) => {
    return new Promise((resolve, reject) => {
        const endpoint = new URL(`${baseURL}${path}`);
        console.log('Requesting endpoint', endpoint);

        if (
            setup.method === 'HEAD' ||
            setup.method === 'GET' ||
            !setup.method
        ) {
            addQuery(endpoint, params);
        } else {
            if (
                setup.headers &&
                setup.headers['Content-Type'] === 'application/json'
            ) {
                setup.body = JSON.stringify(params);
            } else {
                setup.body = params;
            }
        }

        const fetchSettings = defaultsDeep(setup, FETCH_INIT_DEFAULTS);
        console.log('Fetch config ', fetchSettings);

        fetch(endpoint.href, fetchSettings)
            .then(response => {
                console.log(response);
                if (response.status === 204) {
                    resolve();
                } else if (response.status === 200 || response.status === 201) {
                    console.log(response);

                    response
                        .json()
                        .then(body => {
                            if (typeof body === 'string') {
                                body = JSON.parse(body);
                            }

                            console.log(body);
                            resolve(body);
                        })
                        .catch(e => {
                            reject(e);
                        });
                } else if (
                    response.status == 400 ||
                    response.status == 409 ||
                    response.status == 412
                ) {
                    response
                        .json()
                        .then(error => {
                            reject((error && error.message) || 'No Error');
                        })
                        .catch(e => {
                            //throw new Error("Failed to unmarshall error " + response.statusText);
                            console.error(
                                'Failed to unmarshall error ' +
                                response.statusText
                            );
                            reject(
                                'The service response was not understood, please contact support if this problem persists.'
                            );
                        });
                } else {
                    response
                        .json()
                        .then(body => {
                            if (typeof body === 'string') {
                                body = JSON.parse(body);
                            }

                            console.log(body);
                            if (body.message) reject(body.message);
                            else
                                reject(
                                    'Failed to retrieve endpoint ' +
                                    endpoint +
                                    ' with status ' +
                                    response.statusText
                                );
                        })
                        .catch(e => {
                            reject(
                                'Failed to retrieve endpoint ' +
                                endpoint +
                                ' with status ' +
                                response.statusText
                            );
                        });
                }
            })
            .catch(error => {
                console.error(
                    `errored out connecting to service endpoint ${endpoint.toString()}`,
                    error
                );
                reject(error);
            });
    });
};

// to change request METHOD set property key "method" on setup
const requestRaw = baseURL => (path = '', params = {}, setup = {}) => {
    return new Promise((resolve, reject) => {
        const endpoint = new URL(`${baseURL}${path}`);
        console.log('Requesting endpoint', endpoint);

        if (
            setup.method === 'HEAD' ||
            setup.method === 'GET' ||
            !setup.method
        ) {
            addQuery(endpoint, params);
        } else {
            if (
                setup.headers &&
                setup.headers['Content-Type'] === 'application/json'
            ) {
                setup.body = JSON.stringify(params);
            } else {
                setup.body = params;
            }
        }

        const fetchSettings = defaultsDeep(setup, FETCH_INIT_DEFAULTS);
        console.log('Fetch config ', fetchSettings);

        fetch(endpoint.href, fetchSettings)
            .then(response => {
                console.log(response);
                if (
                    response.status === 200 ||
                    response.status === 201 ||
                    response.status === 204
                ) {
                    console.log(response.headers);
                    resolve(response);
                } else if (
                    response.status === 400 ||
                    response.status === 409 ||
                    response.status === 412 ||
                    response.status === 500
                ) {
                    reject(response);
                } else {
                    throw new Error(
                        'Failed to retrieve endpoint ' +
                        endpoint +
                        ' with status ' +
                        response.statusText
                    );
                }
            })
            .catch(error => {
                console.error(
                    `errored out connecting to service endpoint ${endpoint.toString()}`,
                    error
                );
                reject(error);
            });
    });
};

const fetchData = (path = '', params = {}, setup = {}) => {
    return request(servicePrefix)(path, params, setup);
};

const fetchDataRaw = (path = '', params = {}, setup = {}) => {
    return requestRaw(servicePrefix)(path, params, setup);
};

export const api = {
    getChart: (symbol, months) => fetchData ("/ameritrade/chart",{symbol, months})
};